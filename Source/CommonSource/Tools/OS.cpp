/*-----------------------------------------------------------------------------
Autor                  Datum
E. Fitze               14.06.2013

-- BESCHREIBUNG ---------------------------------------------------------------


-- AENDERUNGEN ----------------------------------------------------------------

Autor                  Datum

-----------------------------------------------------------------------------*/
#include "OS.h"

#include "MQX.h"
#include "String.h"

#include "Logger.h"


using namespace Tools;

//-----------------------------------------------------------------------------
extern _mem_pool_id _BSP_sram_pool;

//-----------------------------------------------------------------------------
Bool OS::m_clearOnAllocate = FALSE;


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
OS::OS()
//-----------------------------------------------------------------------------
{
}
//-----------------------------------------------------------------------------
OS::~OS()
//-----------------------------------------------------------------------------
{
}

//-----------------------------------------------------------------------------
void OS::ClearOnAllocate(Bool clear)
//-----------------------------------------------------------------------------
{
   m_clearOnAllocate = clear;
}

//-----------------------------------------------------------------------------
UInt8* OS::AllocateSRAM(UInt32 blockSize)
//-----------------------------------------------------------------------------
{
   void*   memoryPtr;
   if (m_clearOnAllocate)
   {
      memoryPtr = _mem_alloc_system_zero_from(_BSP_sram_pool, blockSize);
   }
   else
   {
      memoryPtr = _mem_alloc_system_from(_BSP_sram_pool, blockSize);
   }
   if (memoryPtr == NULL)
   {
      LOG1(Tools::Logger::lmWarning, "ERROR %d MQX_OUT_OF_MEMORY. AllocateSRAM", _task_get_error());
   }
   return (UInt8*)memoryPtr;
}

//-----------------------------------------------------------------------------
void OS::DeallocateSRAM(UInt8* memoryPointer)
//-----------------------------------------------------------------------------
{
   UInt32 mqxRet;
   mqxRet = _mem_free(memoryPointer);
   if (mqxRet != MQX_OK)
   {
      LOG1(Tools::Logger::lmWarning, "ERROR %d. DeallocateSRAM", mqxRet);
   }
}


//-----------------------------------------------------------------------------
void OS::CopyString(char* from, char* to)
//-----------------------------------------------------------------------------
{
   strcpy(to ,from);
}

//-----------------------------------------------------------------------------
void OS::CopyBytes(PVOID from, PVOID to, UInt32 count)
//-----------------------------------------------------------------------------
{
   _mem_copy(from ,to, count);
}

//-----------------------------------------------------------------------------
void OS::ZeroBytes(PVOID memAddress, UInt32 count)
//-----------------------------------------------------------------------------
{
   _mem_zero(memAddress, count);
}

//-----------------------------------------------------------------------------
UInt32 OS::GetTickCount()
//-----------------------------------------------------------------------------
{
   TIME_STRUCT     time;
   _time_get(&time);
   return 1000*time.SECONDS + time.MILLISECONDS;
}

//-----------------------------------------------------------------------------
UInt32 OS::ConvertToIP(char * ipAddress)
//-----------------------------------------------------------------------------
{
   UInt32 idx, a, b, c, d;
   idx = sscanf(ipAddress, "%d.%d.%d.%d", &a, &b, &c, &d);
   if (4 == idx)
   {
      return (a << 24) | (b << 16) | (c << 8) | d;
   }
   return 0;
}
//-----------------------------------------------------------------------------
Bool OS::ConvertFromIP(UInt32 ipAdr, char * ipText)
//-----------------------------------------------------------------------------
{
   UInt32 a, b, c, d;
   a = ipAdr >> 24;
   b = (ipAdr >> 16) & 0xFF;
   c = (ipAdr >>  8) & 0xFF;
   d = (ipAdr) & 0xFF;
   return 1 == sprintf(ipText, "%d.%d.%d.%d", &a, &b, &c, &d);
}


